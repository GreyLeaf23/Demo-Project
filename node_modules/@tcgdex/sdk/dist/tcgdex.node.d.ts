type SupportedLanguages = 'en' | 'fr' | 'es' | 'it' | 'pt' | 'de';
/**
 * @deprecated This is not used anymore in the API V2
 */
type Languages<T = string> = Partial<Record<SupportedLanguages, T>>;
interface SerieResume {
    id: string;
    name: string;
    logo?: string;
}
interface Serie extends SerieResume {
    sets: SetList;
}
interface variants {
    normal?: boolean;
    reverse?: boolean;
    holo?: boolean;
    firstEdition?: boolean;
}
type SetList = Array<SetResume>;
type SerieList = Array<SerieResume>;
type CardList = Array<CardResume>;
interface SetResume {
    id: string;
    name: string;
    logo?: string;
    symbol?: string;
    cardCount: {
        /**
         * total of number of cards
         */
        total: number;
        /**
          * number of cards officialy (on the bottom of each cards)
          */
        official: number;
    };
}
interface Set extends SetResume {
    serie: SerieResume;
    tcgOnline?: string;
    variants?: variants;
    releaseDate: string;
    /**
     * Designate if the set is usable in tournaments
     *
     * Note: this is specific to the set and if a
     * card is banned from the set it will still be true
     */
    legal: {
        /**
         * Ability to play in standard tournaments
         */
        standard: boolean;
        /**
         * Ability to play in expanded tournaments
         */
        expanded: boolean;
    };
    cardCount: {
        /**
         * total of number of cards
         */
        total: number;
        /**
         * number of cards officialy (on the bottom of each cards)
         */
        official: number;
        /**
         * number of cards having a normal version
         */
        normal: number;
        /**
         * number of cards having an reverse version
         */
        reverse: number;
        /**
         * number of cards having an holo version
         */
        holo: number;
        /**
         * Number of possible cards
         */
        firstEd?: number;
    };
    cards: CardList;
}
interface CardResume {
    id: string;
    localId: string;
    /**
     * Card Name (Including the suffix if next to card name)
     */
    name: string;
    image?: string;
}
interface Card<SetType extends SetResume = SetResume> extends CardResume {
    /**
     * Card illustrator
     */
    illustrator?: string;
    /**
     * Card Rarity
     *
     * - None https://www.tcgdex.net/database/sm/smp/SM01
     * - Common https://www.tcgdex.net/database/xy/xy9/1
     * - Uncommon https://www.tcgdex.net/database/xy/xy9/2
     * - Rare https://www.tcgdex.net/database/xy/xy9/3
     * - Ultra Rare
     * - Secret Rare
     */
    rarity: string;
    /**
     * Card Category
     *
     * - Pokemon
     * - Trainer
     * - Energy
     */
    category: string;
    /**
     * Card Variants (Override Set Variants)
     */
    variants?: variants;
    /**
     * Card Set
     */
    set: SetType;
    /**
     * Pokemon only elements
     */
    /**
     * Pokemon Pokedex ID
     */
    dexId?: Array<number>;
    /**
     * Pokemon HP
     */
    hp?: number;
    /**
     * Pokemon Types
     * ex for multiple https://www.tcgdex.net/database/ex/ex13/17
     */
    types?: Array<string>;
    /**
     * Pokemon Sub Evolution
     */
    evolveFrom?: string;
    /**
     * Pokemon Weight
     */
    weight?: string;
    /**
     * Pokemon Description
     */
    description?: string;
    /**
     * Level of the Pokemon
     *
     * NOTE: can be equal to 'X' when the pokemon is a LEVEL-UP one
     */
    level?: number | string;
    /**
     * Pokemon Stage
     *
     * - Basic https://www.tcgdex.net/database/xy/xy9/1
     * - BREAK https://www.tcgdex.net/database/xy/xy9/18
     * - LEVEL-UP https://www.tcgdex.net/database/dp/dp1/121
     * - MEGA https://www.tcgdex.net/database/xy/xy1/2
     * - RESTORED https://www.tcgdex.net/database/bw/bw5/53
     * - Stage1 https://www.tcgdex.net/database/xy/xy9/2
     * - Stage2 https://www.tcgdex.net/database/xy/xy9/3
     * - VMAX https://www.tcgdex.net/database/swsh/swsh1/50
     */
    stage?: string;
    /**
     * Card Suffix
     *
     * - EX https://www.tcgdex.net/database/ex/ex2/94
     * - GX https://www.tcgdex.net/database/sm/sm12/4
     * - V https://www.tcgdex.net/database/swsh/swsh1/1
     * - Legend https://www.tcgdex.net/database/hgss/hgss1/114
     * - Prime https://www.tcgdex.net/database/hgss/hgss2/85
     * - SP https://www.tcgdex.net/database/pl/pl1/7
     * - TAG TEAM-GX https://www.tcgdex.net/database/sm/sm12/226
     */
    suffix?: string;
    /**
     * Pokemon Held Item
     *
     * ex https://www.tcgdex.net/database/dp/dp2/75
     */
    item?: {
        name: string;
        effect: string;
    };
    /**
     * Pokemon Abilities
     *
     * multi abilities ex https://www.tcgdex.net/database/ex/ex15/10
     */
    abilities?: Array<{
        type: string;
        name: string;
        effect: string;
    }>;
    /**
     * Pokemon Attacks
     */
    attacks?: Array<{
        cost?: Array<string>;
        name: string;
        effect?: string;
        damage?: string | number;
    }>;
    /**
     * Pokemon Weaknesses
     */
    weaknesses?: Array<{
        type: string;
        value?: string;
    }>;
    resistances?: Array<{
        type: string;
        value?: string;
    }>;
    retreat?: number;
    effect?: string;
    trainerType?: string;
    energyType?: string;
    /**
     * Define the rotation mark on cards >= Sword & Shield
     */
    regulationMark?: string;
    /**
     * Card ability to be played in official tournaments
     *
     * Note: all cards are avaialable to play in unlimited tournaments
     */
    legal: {
        /**
         * Ability to play in standard tournaments
         */
        standard: boolean;
        /**
         * Ability to play in expanded tournaments
         */
        expanded: boolean;
    };
}
type StringEndpointList = Array<string>;
interface StringEndpoint {
    name: string;
    cards: Array<CardResume>;
}

declare class TCGdex {
    lang?: SupportedLanguages | undefined;
    static fetch: typeof fetch;
    /**
     * @deprecated to change the lang use `this.lang`
     */
    static defaultLang: SupportedLanguages;
    constructor(lang?: SupportedLanguages | undefined);
    getLang(): SupportedLanguages;
    /**
     * Shortcut to easily fetch a card using both it's global id and it's local ID
     * @param id the card global/local ID
     * @param set the card set name/ID (optionnal)
     * @returns the card object
     */
    fetchCard(id: string | number, set?: string): Promise<Card | undefined>;
    /**
     * Shortcut to easily fetch cards using an optionnal set name/ID
     * @param set the card set name/ID (optionnal)
     * @returns a card list
     */
    fetchCards(set?: string): Promise<Array<CardResume> | undefined>;
    /**
     * @deprecated use `this.fetch('sets', set)`
     */
    fetchSet(set: string): Promise<Set | undefined>;
    /**
     * @deprecated use `this.fetch('series', serie)`
     */
    fetchSerie(serie: string): Promise<Serie | undefined>;
    /**
     * @deprecated use `this.fetch('series')`
     */
    fetchSeries(): Promise<SerieList | undefined>;
    /**
     * Shortcut to easily fetch sets using an optionnal serie name/ID
     * @param serie the card set name/ID (optionnal)
     * @returns a card list
     */
    fetchSets(serie?: string): Promise<SetList | undefined>;
    /**
     * Fetch a card using its global id
     * @param endpoint_0 'cards'
     * @param endpoint_1 {string} the card global ID
     */
    fetch(...type: ['cards', string]): Promise<Card | undefined>;
    /**
     * Fetch every cards in the database
     * @param endpoint_0 'cards'
     */
    fetch(type: 'cards'): Promise<Array<CardResume> | undefined>;
    /**
     * Fetch a card using its local id and its set
     * @param endpoint_0 'sets'
     * @param endpoint_1 {string} the set name or ID
     * @param endpoint_2 {string} the card local ID
     */
    fetch(...endpoint: ['sets', string, string]): Promise<Card | undefined>;
    /**
     * Fetch a set
     * @param endpoint_0 'sets'
     * @param endpoint_1 {string} the set name or ID
     */
    fetch(...endpoint: ['sets', string]): Promise<Set | undefined>;
    /**
     * Fetch every sets
     * @param endpoint_0 'sets'
     */
    fetch(endpoint: 'sets'): Promise<SetList | undefined>;
    /**
     * Fetch a serie
     * @param endpoint_0 'series'
     * @param endpoint_1 {string} the serie name or ID
     */
    fetch(...endpoint: ['series', string]): Promise<Serie | undefined>;
    /**
     * Fetch every series
     * @param endpoint_0 'series'
     */
    fetch(endpoint: 'series'): Promise<SerieList | undefined>;
    /**
     * Fetch cards depending on a specific filter
     * @param endpoint_0 {'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'}
     * Possible value 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'
     * @param endpoint_1 {string} the value set while fetching the index
     */
    fetch(...endpoint: ['categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants', string]): Promise<StringEndpoint | undefined>;
    /**
     * Fetch cards depending on a specific filter
     * @param endpoint_0 {'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'}
     * Possible value 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'
     * @param endpoint_1 {string} Fetch the possible values to use depending on the endpoint
     */
    fetch(endpoint: 'categories' | 'dex-ids' | 'energy-types' | 'hp' | 'illustrators' | 'rarities' | 'regulation-marks' | 'retreats' | 'stages' | 'suffixes' | 'trainer-types' | 'types' | 'variants'): Promise<Array<string> | undefined>;
    /**
     * Function to make the request and normalize the whole path
     */
    private makeRequest;
}

export { Card, CardList, CardResume, Languages, Serie, SerieList, SerieResume, Set, SetList, SetResume, StringEndpoint, StringEndpointList, SupportedLanguages, TCGdex as default };
